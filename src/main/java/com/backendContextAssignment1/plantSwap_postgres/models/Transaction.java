package com.backendContextAssignment1.plantSwap_postgres.models;

import com.backendContextAssignment1.plantSwap_postgres.models.supportClasses.TransactionStatusEnum;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;

@Entity @Table(name = "transactions")
public class Transaction {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //one plant can have more than one transaction if prev. transaction is rejected
    @ManyToOne(fetch = FetchType.EAGER)
    //not nullable
    @JoinColumn(name = "plant_id", nullable = false)
    @NotNull(message = "plant_id cannot be null")
    private Plant plantID;

    //one user can have more than one transaction
    @ManyToOne(fetch = FetchType.EAGER)
    //not nullable
    @JoinColumn(name = "buyer_id", nullable = false)
    @NotNull(message = "plant_id cannot be null")
    private User buyerID;

    @Column(name = "status", nullable = false)
    @NotNull(message = "status cannot be null")
    private TransactionStatusEnum status;

    @Column(name = "swap_offer", length = 1000)
    @Size(max = 1000, message = "swap_offer cannot be longer than 1000 characters")
    private String swapOffer;

    @Column(name = "created_at", nullable = false, updatable = false)
    @NotNull(message = "created_at cannot be null")
    private LocalDate createdAt;

    @Column(name = "updated_at")
    private LocalDate updatedAt;

    public Transaction() {
        //set IF plant_id Plant has price, status= ACCEPTED, swapOffer must be null,
        //IF price = null, swapOffer must not be null and status = swap_pending.
        createdAt = LocalDate.now();
        updatedAt = null;
    }

    //autogenerated getters and setters (w. validation annotations)
    //no setter for id and createdAt, since these should never be modified

}
