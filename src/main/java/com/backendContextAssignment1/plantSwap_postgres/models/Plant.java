package com.backendContextAssignment1.plantSwap_postgres.models;

import com.backendContextAssignment1.plantSwap_postgres.models.supportClasses.*;
import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity @Table(name = "plants")
public class Plant {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //one user can have more than one plant
    //BUT NOT MORE THAN 10 ACTIVE PLANTS - make this constraint somewhere
    @ManyToOne(fetch = FetchType.EAGER)
    //not nullable
    @JoinColumn(name = "user_id", nullable = false, updatable = false)
    @NotNull(message = "user id cannot be null")
    private User user;

    @Column(name = "common_name", nullable = false, length = 50)
    @NotNull(message = "commonName cannot be null")
    @Size(min = 1, max = 50, message = "commonName must between 1 and 50 characters long")
    private String commonName;

    @Column(name = "plant_family", nullable = false, length = 50)
    @NotNull(message = "plant_family cannot be null")
    @Size(min = 1, max = 50, message = "plantFamily must between 1 and 50 characters long")
    private String plantFamily;

    @Column(name = "plant_genus", nullable = false, length = 50)
    @NotNull(message = "plant_genus cannot be null")
    @Size(min = 1, max = 50, message = "plantGenus must between 1 and 50 characters long")
    private String plantGenus;

    @Column(name = "plant_size", nullable = false)
    @NotNull(message = "plantSize cannot be null")
    private PlantSizeEnum plantSize;

    @Column(name = "plant_stage", nullable = false)
    @NotNull(message = "plantStage cannot be null")
    private PlantStageEnum plantStage;

    @Column(name = "care_difficulty", nullable = false)
    @NotNull(message = "careDifficulty cannot be null")
    @Min(value = 1, message = "careDifficulty must be an integer between 1 and 5")
    @Max(value = 5, message = "careDifficulty must be an integer between 1 and 5")
    private int careDifficulty;

    @Column(name = "light_requirements", nullable = false)
    private PlantLightRequirementEnum lightRequirement;

    @Column(name = "water_requirements", nullable = false)
    private PlantWaterRequirementEnum waterRequirement;

    @Column(name = "image_url", length = 500)
    @Size(max = 500, message = "imageURL cannot be longer than 500 characters")
    private String imageURL;

    @Column(name = "description", length = 1000)
    @Size(max = 500, message = "description cannot be longer than 500 characters")
    private String description;

    @Column(name = "price")
    @Min(value = 50, message = "price must be between 50 and 1000")
    @Max(value = 1000, message = "price must be between 50 and 1000")
    private BigDecimal price;

    @Column(name = "swap_condition", length = 1000)
    @Size(max = 1000, message = "swapCondition cannot be longer than 1000 characters")
    private String swapConditions;

    @Column(name = "availability", nullable = false)
    @NotNull(message = "availability cannot be null")
    private PlantAvailabilityStatusEnum availabilityStatus;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    public Plant() {
        //should this be here or in Controller class???
        /*
        if ((price == null && swapConditions == null) || (price != null && swapConditions != null)){
            throw new IllegalArgumentException();
        }
      */
        //maybe move to service class?
        plantSize = PlantSizeEnum.UNSPECIFIED;
        plantStage = PlantStageEnum.OTHER;
        waterRequirement = PlantWaterRequirementEnum.UNSPECIFIED;
        lightRequirement = PlantLightRequirementEnum.UNSPECIFIED;
        availabilityStatus = PlantAvailabilityStatusEnum.AVAILABLE;
        createdAt = LocalDateTime.now();
    }

    //autogenerated getters and setters (w. validation annotations)
    //no setter for id and createdAt, since these should never be modified
    public long getId() {
        return id;
    }

    public @NotNull(message = "user id cannot be null") User getUser() {
        return user;
    }

    public void setUser(@NotNull(message = "user id cannot be null") User user) {
        this.user = user;
    }

    public @NotNull(message = "commonName cannot be null") @Size(min = 1, max = 50, message = "commonName must between 1 and 50 characters long") String getCommonName() {
        return commonName;
    }

    public void setCommonName(@NotNull(message = "commonName cannot be null") @Size(min = 1, max = 50, message = "commonName must between 1 and 50 characters long") String commonName) {
        this.commonName = commonName;
    }

    public @NotNull(message = "plant_family cannot be null") @Size(min = 1, max = 50, message = "plantFamily must between 1 and 50 characters long") String getPlantFamily() {
        return plantFamily;
    }

    public void setPlantFamily(@NotNull(message = "plant_family cannot be null") @Size(min = 1, max = 50, message = "plantFamily must between 1 and 50 characters long") String plantFamily) {
        this.plantFamily = plantFamily;
    }

    public @NotNull(message = "plant_genus cannot be null") @Size(min = 1, max = 50, message = "plantGenus must between 1 and 50 characters long") String getPlantGenus() {
        return plantGenus;
    }

    public void setPlantGenus(@NotNull(message = "plant_genus cannot be null") @Size(min = 1, max = 50, message = "plantGenus must between 1 and 50 characters long") String plantGenus) {
        this.plantGenus = plantGenus;
    }

    public @NotNull(message = "plantSize cannot be null") PlantSizeEnum getPlantSize() {
        return plantSize;
    }

    public void setPlantSize(@NotNull(message = "plantSize cannot be null") PlantSizeEnum plantSize) {
        this.plantSize = plantSize;
    }

    public @NotNull(message = "plantStage cannot be null") PlantStageEnum getPlantStage() {
        return plantStage;
    }

    public void setPlantStage(@NotNull(message = "plantStage cannot be null") PlantStageEnum plantStage) {
        this.plantStage = plantStage;
    }

    @NotNull(message = "careDifficulty cannot be null")
    @Min(value = 1, message = "careDifficulty must be an integer between 1 and 5")
    @Max(value = 5, message = "careDifficulty must be an integer between 1 and 5")
    public int getCareDifficulty() {
        return careDifficulty;
    }

    public void setCareDifficulty(@NotNull(message = "careDifficulty cannot be null") @Min(value = 1, message = "careDifficulty must be an integer between 1 and 5") @Max(value = 5, message = "careDifficulty must be an integer between 1 and 5") int careDifficulty) {
        this.careDifficulty = careDifficulty;
    }

    public PlantLightRequirementEnum getLightRequirement() {
        return lightRequirement;
    }

    public void setLightRequirement(PlantLightRequirementEnum lightRequirement) {
        this.lightRequirement = lightRequirement;
    }

    public PlantWaterRequirementEnum getWaterRequirement() {
        return waterRequirement;
    }

    public void setWaterRequirement(PlantWaterRequirementEnum waterRequirement) {
        this.waterRequirement = waterRequirement;
    }

    public @Size(max = 500, message = "imageURL cannot be longer than 500 characters") String getImageURL() {
        return imageURL;
    }

    public void setImageURL(@Size(max = 500, message = "imageURL cannot be longer than 500 characters") String imageURL) {
        this.imageURL = imageURL;
    }

    public @Size(max = 500, message = "description cannot be longer than 500 characters") String getDescription() {
        return description;
    }

    public void setDescription(@Size(max = 500, message = "description cannot be longer than 500 characters") String description) {
        this.description = description;
    }

    public @Min(value = 50, message = "price must be between 50 and 1000") @Max(value = 1000, message = "price must be between 50 and 1000") BigDecimal getPrice() {
        return price;
    }

    public void setPrice(@Min(value = 50, message = "price must be between 50 and 1000") @Max(value = 1000, message = "price must be between 50 and 1000") BigDecimal price) {
        this.price = price;
    }

    public @Size(max = 1000, message = "swapCondition cannot be longer than 1000 characters") String getSwapConditions() {
        return swapConditions;
    }

    public void setSwapConditions(@Size(max = 1000, message = "swapCondition cannot be longer than 1000 characters") String swapConditions) {
        this.swapConditions = swapConditions;
    }

    public @NotNull(message = "availability cannot be null") PlantAvailabilityStatusEnum getAvailabilityStatus() {
        return availabilityStatus;
    }

    public void setAvailabilityStatus(@NotNull(message = "availability cannot be null") PlantAvailabilityStatusEnum availabilityStatus) {
        this.availabilityStatus = availabilityStatus;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }


    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}
