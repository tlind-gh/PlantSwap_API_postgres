package com.backendContextAssignment1.plantSwap_postgres.models;

import com.backendContextAssignment1.plantSwap_postgres.models.supportClasses.*;
import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDate;

@Entity @Table(name = "plants")
public class Plant {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //one user can have more than one plant
    //BUT NOT MORE THAN 10 ACTIVE PLANTS - make this constraint somewhere
    @ManyToOne(fetch = FetchType.EAGER)
    //not nullable
    @JoinColumn(name = "user_id", nullable = false)
    @NotNull(message = "user_id cannot be null")
    private User user_id;

    @Column(name = "common_name", nullable = false, length = 50)
    @NotNull(message = "common_name cannot be null")
    @Size(min = 1, max = 50, message = "common_name must between 8 and 50 characters long")
    private String commonName;

    @Column(name = "plant_family", nullable = false, length = 50)
    @NotNull(message = "plant_family cannot be null")
    @Size(min = 1, max = 50, message = "plant_family must between 8 and 50 characters long")
    private String plantFamily;

    @Column(name = "plant_genus", nullable = false, length = 50)
    @NotNull(message = "plant_genus cannot be null")
    @Size(min = 1, max = 50, message = "plant_genus must between 8 and 50 characters long")
    private String plantGenus;

    @Column(name = "plant_size", nullable = false)
    @NotNull(message = "plant_size cannot be null")
    private PlantSizeEnum plantSize;

    @Column(name = "plant_stage", nullable = false)
    @NotNull(message = "plant_stage cannot be null")
    private PlantStageEnum plantStage;

    @Column(name = "care_difficulty", nullable = false)
    @NotNull(message = "care_difficulty cannot be null")
    @Max(value = 1, message = "care_difficulty must be a value between 1 and 5")
    @Max(value = 5, message = "care_difficulty must be a value between 1 and 5")
    private int careDifficulty;

    @Column(name = "light_requirements", nullable = false)
    @NotNull(message = "light_requirements cannot be null")
    private PlantLightRequirementEnum lightRequirement;

    @Column(name = "water_requirements", nullable = false)
    @NotNull(message = "water_requirements cannot be null")
    private PlantWaterRequirementEnum waterRequirement;

    @Column(name = "image_url", length = 500)
    @Size(max = 500, message = "image_url cannot be longer than 500 characters")
    private String imageURL;

    @Column(name = "description", length = 1000)
    @Size(max = 500, message = "description cannot be longer than 500 characters")
    private String description;

    @Column(name = "price")
    private BigDecimal price;

    @Column(name = "swap_condition", length = 1000)
    @Size(max = 1000, message = "swap_condition cannot be longer than 1000 characters")
    private String swapConditions;

    @Column(name = "availability", nullable = false)
    @NotNull(message = "availability cannot be null")
    private PlantAvailabilityStatusEnum availabilityStatus;

    @Column(name = "created_at", nullable = false, updatable = false)
    @NotNull(message = "created_at cannot be null")
    private LocalDate createdAt;

    @Column(name = "updated_at")
    private LocalDate updatedAt;

    public Plant() {
        //should this be here or in Controller class???
        /*
        if ((price == null && swapConditions == null) || (price != null && swapConditions != null)){
            throw new IllegalArgumentException();
        }
        createdAt = LocalDate.now();
        updatedAt = null;
    */
    }


    //autogenerated getters and setters (w. validation annotations)
    //no setter for id and createdAt, since these should never be modified
}
